

Memcached是一款开源、高性能、分布式内存对象缓存系统，可应用各种需要缓存的场景，其主要目的是通过降低对Database的访问来加速web应用程序。
它是一个基于内存的“键值对”存储，用于存储数据库调用、API调用或页面引用结果的直接数据，如字符串、对象等。

memcached是以LiveJournal旗下Danga Interactive 公司的Brad Fitzpatric 为首开发的一款软件。
现在已成为mixi、hatena、Facebook、Vox、LiveJournal等众多服务中提高Web应用扩展性的重要因素。

Memcached是一款开发工具，它既不是一个代码加速器，也不是数据库中间件。其设计哲学思想主要反映在如下方面：
1. 简单key/value存储：服务器不关心数据本身的意义及结构，只要是可序列化数据即可。存储项由“键、过期时间、可选的标志及数据”四个部分组成；
2. 功能的实现一半依赖于客户端，一半基于服务器端：客户负责发送存储项至服务器端、从服务端获取数据以及无法连接至服务器时采用相应的动作；
   服务端负责接收、存储数据，并负责数据项的超时过期；
3. 各服务器间彼此无视：不在服务器间进行数据同步；
4. O(1)的执行效率
5. 清理超期数据：默认情况下，Memcached是一个LRU缓存，同时它按事先预订的时长清理超期数据；但事实上，memcached不会删除任何已缓存数据，只是在其过期之后不再为客户所见；
   而且，memcached也不会真正按期限清理缓存，而仅是当get命令到达时检查其时长；

Memcached提供了为数不多的几个命令来完成与服务器端的交互，这些命令基于memcached的协议实现。
先要telnet host  port 才能使用如下命令

存储类命令：set, add, replace, append, prepend
获取数据类命令：get, delete, incr/decr
统计类命令：stats, stats items, stats slabs, stats sizes
清理命令： flush_all

一、安装libevent

memcached依赖于libevent API，因此要事先安装之，项目主页：http://libevent.org/，读者可自行选择需要的版本下载。
本文采用的是目前最新版本的源码包libevent-2.0.21-stable.tar.gz。
安装过程：
# tar xf libevent-2.0.21-stable.tar.gz
# cd libevent-2.0.21
# ./configure --prefix=/usr/local/libevent
# make && make install
# echo "/usr/local/libevent/lib" > /etc/ld.so.conf.d/libevent.conf
# ldconfig 

二、安装配置memcached

1、安装memcached
# tar xf memcached-1.4.15.tar.gz 
# cd memcached-1.4.15
# ./configure --prefix=/usr/local/memcached --with-libevent=/usr/local/libevent
# make && make install


2、memcached SysV的startup脚本代码如下所示，将其建立为/etc/init.d/memcached文件：

#!/bin/bash
#
# Init file for memcached
#
# chkconfig: - 86 14
# description: Distributed memory caching daemon
#
# processname: memcached
# config: /etc/sysconfig/memcached

. /etc/rc.d/init.d/functions

## Default variables
PORT="11211"
USER="nobody"
MAXCONN="1024"
CACHESIZE="64"
OPTIONS=""

RETVAL=0
prog="/usr/local/memcached/bin/memcached"
desc="Distributed memory caching"
lockfile="/var/lock/subsys/memcached"

start() {
        echo -n $"Starting $desc (memcached): "
        daemon $prog -d -p $PORT -u $USER -c $MAXCONN -m $CACHESIZE -o "$OPTIONS"
        RETVAL=$?
        [ $RETVAL -eq 0 ] && success && touch $lockfile || failure
        echo
        return $RETVAL
}

stop() {
        echo -n $"Shutting down $desc (memcached): "
        killproc $prog
        RETVAL=$?
        [ $RETVAL -eq 0 ] && success && rm -f $lockfile || failure
        echo
        return $RETVAL
}

restart() {
        stop
        start
}

reload() {
        echo -n $"Reloading $desc ($prog): "
        killproc $prog -HUP
        RETVAL=$?
        [ $RETVAL -eq 0 ] && success || failure
        echo
        return $RETVAL
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart)
        restart
        ;;
  condrestart)
        [ -e $lockfile ] && restart
        RETVAL=$?
        ;;       
  reload)
        reload
        ;;
  status)
        status $prog
        RETVAL=$?
        ;;
   *)
        echo $"Usage: $0 {start|stop|restart|condrestart|status}"
        RETVAL=1
esac

exit $RETVAL


使用如下命令配置memcached成为系统服务：
# chmod +x /etc/init.d/memcached
# chkconfig --add memcached
# service memcached start

3、使用telnet命令测试memcached的使用
Memcached提供一组基本命令用于基于命令行调用其服务或查看服务器状态等。

# telnet 127.0.0.1 11211

add命令：
add keyname flag  timeout  datasize
如：
add mykey 0 10 12 
Hello world!

get命令：
get keyname
如：get mykey
VALUE mykey 0 12
Hello world!
END

4、memcached的常用选项说明

-l <ip_addr>：指定进程监听的地址；
-d: 以服务模式运行；
-u <username>：以指定的用户身份运行memcached进程；
-m <num>：用于缓存数据的最大内存空间，单位为MB，默认为64MB；
-c <num>：最大支持的并发连接数，默认为1024；
-p <num>: 指定监听的TCP端口，默认为11211；
-U <num>：指定监听的UDP端口，默认为11211，0表示关闭UDP端口；
-t <threads>：用于处理入站请求的最大线程数，仅在memcached编译时开启了支持线程才有效；
-f <num>：设定Slab Allocator定义预先分配内存空间大小固定的块时使用的增长因子；
-M：当内存空间不够使用时返回错误信息，而不是按LRU算法利用空间；
-n: 指定最小的slab chunk大小；单位是字节；
-S: 启用sasl进行用户认证；



三、安装Memcached的PHP扩展，必须要安装该扩展后，php才能访问memcached

①安装PHP的memcache扩展
# tar xf memcache-2.2.5.tgz
# cd memcache-2.2.5
/usr/local/php/bin/phpize
# ./configure --with-php-config=/usr/local/php/bin/php-config --enable-memcache
# make && make install

上述安装完后会有类似以下的提示：

Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-non-zts-20090626/

②编辑/usr/local/php/lib/php.ini，在“动态模块”相关的位置添加如下一行来载入memcache扩展：
extension=/usr/local/php/lib/php/extensions/no-debug-non-zts-20090626/memcache.so


而后对memcached功能进行测试，在网站目录中建立测试页面test.php，添加如下内容：
<?php
    $mem = new Memcache;
    $mem->connect("127.0.0.1", 11211)  or die("Could not connect");
    $version = $mem->getVersion();
    echo "Server's version: ".$version."<br/>\n";
    $mem->set('hellokey', 'Hello World', 0, 600) or die("Failed to save data at the memcached server");
    echo "Store data in the cache (data will expire in 600 seconds)<br/>\n";
    $get_result = $mem->get('hellokey');
    echo "$get_result is from memcached server.";         
?>

如果有输出“Hello World is from memcached.”等信息，则表明php可以访问memcachel。


四、使用libmemcached的客户端工具:

访问memcached的传统方法是使用基于perl语言开发的Cache::memcached模块，这个模块在大多数perl代码中都能良好的工作，但也有着众所周知的性能方面的问题。
libMemcached则是基于C语言开发的开源的C/C++代码访问memcached的库文件，同时它还提供了数个可以远程使用的memcached管理工具，如memcat, memping，memstat，memslap等。

1) 编译安装libmemcached
# tar xf libmemcached-1.0.2.tar.gz 
# cd libmemcached-1.0.2
# ./configure 
# make && make install
# ldconfig

2) 客户端工具
# memcat --servers=127.0.0.1:11211 mykey
# memping 
# memslap
# memstat


五、Nginx整合memcached:
server {
        listen       80;
        server_name  www.magedu.com;
        #charset koi8-r;
        #access_log  logs/host.access.log  main;
        location / {
                set $memcached_key $uri;  $memcached_key是变量名，$uri是变量名的值
                memcached_pass     127.0.0.1:11211;
                default_type       text/html;
                error_page         404 @fallback;
        }

        location @fallback {
                proxy_pass http://172.16.0.1;
        }
}


视频内容
29-5
memcached：
      缓存的是K/V格式
        key--value
        uri--MD5，hash校验码（key通常是uri，也可以是其他键）
     数据结构类型分为：
           结构化：关系型数据库
           半结构化：xml，json，（nosql，如hadoop,mongodb）
           非结构化：文件系统
     memcached：内容存储在内存中
     redis：    内容存储在内存中，但可周期性的把数据同步到辅存上，比如硬盘
     memcached是LiveJournal旗下的Danga Interactive；
     memcached特性：
			k/v缓存：可序列化数据（即数据流式化，可以保存在硬盘上）；
                        存储项构成：key  flag标志，expire time有效时长  value；
			功能的实现一半依赖于服务端，一半依赖客服端；（这是旁路式缓存的特性）
			分布式缓存，即memcached也可以做成集群，但是各服务器节点之间互不通信；
			O(1)的执行交流；（查询效率与时间复杂度，空间复杂度无关）
			清理过期数据：LRU 

     分布式系统主机路由（所有分布式系统都会涉及到的算法，非常重要）
                a）取模法：
                   假设有n台主机，key是uri，则过程是，用hash算法对uri取值，得到的结果对n取模，也就是取余数，余数是几就把数据存放在第几台主机
                   缺点是，假设有一台主机坏了，则前面的大部分取余得到的结果都会改变，无法实现快速查询
                b）一致性hash（实际就是放大版的取模法）
                   假设有n台主机，但hash环上有2^32台节点，key是uri，则过程是，用hash算法对uri取值，得到的结果对2^32取模，
                   顺时针方向把数据放在离余数最近的真实主机上

     缓存系统的种类：（重要）
           代理式缓存，也称为透穿式缓存（如nginx，如果nginx中的缓存没有命中，nginx自己扮演成客户端，向后端服务器请求数据）
           旁路式缓存（要不要缓存，如何缓存等都是客户端自己决定，如果memcached中的缓存没有命中，则客户端要自己向后端服务器请求数据，
                      也就是memcached自己不会扮演成客户端，向后端服务器请求数据）

    		
     memcached安装：
	# yum install memcached
	服务脚步配置：/etc/sysconfig/memcached
	监听端口11211/tcp, 11211/udp
        协议格式：文本格式（默认），二进制格式
    memcached常用命令：
	存储类命令：set, add, replace, append后插入, prepend前插入
	获取数据类命令：get, delete, incr/decr
	统计类命令：stats,  stats items缓存条目, stats slabs缓存分类, stats sizes
	清理：flush_all
29-6
    操作实列
          set mykey 0 60 11，0表示flag标志位，60表示expire time有效时长，11表示字符位数，所以后面输入的字符串位数等于11位，不能多也不能少，否则创建不成功。
	  get mykey
          append mykey 0 100 2,2表示要增加的字符位数
          incr mykey 1,1表示在mykey现有值上加1，前提是mykey的值是一个整数	
    memcached程序的常用选项：（对应修改/etc/sysconfig/memcached文件）
			-l  IP：监听的IP地址；
			-m <num>：用于缓存数据的内存空间大小，单位为MB，默认为64；
			-c <num>：最大并发连接数；
			-p PORT：tcp端口
			-U PORT：UDP端口
			-t <num>：用于处理请求的最大线程数；
			-M：内存耗尽时返回错误信息，而不是LRU算法清理；
			-f <factor>： growth factor, 增长因子；（把内存按照固定大小进行划分，如基数是4K，增长因子为1.25，则下一块是5K，以此类推）
			-n <num>：指明最小的slab大小，默认是96；

                        默认没有认证功能，但可借助于sasl实现认证
			sasl：simple authentication layer，简单认证层
			
                        php连接memcached服务器的扩展：
			          php-pecl-memcache或php-pecl-memcached
                        可提供工具程序的程序包
			           libmemcached
                        paython连接到memcached
			          python-memcache
			
		
作业：LVS Web php session memcached，必须掌握
配置前提：
1、将php的会话保持在memcache中；
2、lvs使用nat模型，lvs的配置过程此处省略掉，假设VIP是192.10.0.2，后端real server的地址分别是192.168.139.131和192.168.139.132
3、安装配置好memcached服务器，此处假设memcached服务所在的IP地址是192.168.139.132，端口为11211；
4、不管是lamp（apache+memcached+php）还是lnmp（nginx+memcached+php），后端real server的配置都一样，
   本次配置以lamp为例，如下操作都是针对real server的操作

后端real server 192.168.139.132的配置如下
一、安装所需服务
[root@localhost ~]# yum install httpd php memcached php-pecl-memcache -y 
二、建立测试页面，确认php能正常访问memcached
[root@localhost ~]# vim /var/www/html/test.php
<?php
$mem = new Memcache;
$mem->connect("192.168.139.132", 11211)  or die("Could notconnect"); 
$version = $mem->getVersion();
echo "Server's version: ".$version."<br/>\n";
$mem->set('hellokey', 'Hello World 192.168.139.132', 0, 600) or die("Failed to savedata at the memcached server");
echo "Store data in the cache (data will expire in 600seconds)<br/>\n";
$get_result = $mem->get('hellokey');
echo "$get_result is from memcached server.";  
print"\n"  
?>
[root@localhost ~]# service httpd start
[root@localhost ~]# curl http://192.168.139.132/test.php 出现如下内容，说明php能正常访问memcached
Server's version: 1.4.4<br/>
Store data in the cache (data will expire in 600seconds)<br/>
Hello World 192.168.139.132 is from memcached server.
[root@localhost  ]# telnet 192.168.139.132 11211 
Trying 192.168.139.132...
Connected to 192.168.139.132.
Escape character is '^]'.
get hellokey  连入到memcached服务中获取到的hellokey对应的value内容和在服务器中访问得到的一样
VALUE hellokey 0 27
Hello World 192.168.139.132
END 

rR27Z6SMcw
eMVsRxauNq9yn89sm
三、将php会话保存至memcached中
[root@localhost ~]# vim /etc/php.ini 
session.save_handler = memcache    （前提是要安装 php-pecl-memcache或php-pecl-memcached）
session.save_path = "tcp://192.168.139.132:11211?persistent=1&weight=1&timeout=1&retry_interval=15"（persistent表示长连接，如果还有memcached server以逗号分开）
四、建立测试页面
[root@localhost ~]# vim /var/www/html/session.php
<?php
session_start();
if(!isset($_SESSION['test'])) {
$_SESSION['test'] = time();
}
print$_SESSION['test'];
print"<br><br>";
print"Session ID: " . session_id();
print"\n"
?>
[root@localhost ~]# service httpd restart
后端real server 192.168.139.131也做同样的配置
然后在浏览器中输入http://192.10.0.2/session.php，此时不管调度到后端哪一台主机，页面出现如下内容，说明保持会话实现

1507040686  是获取时间
Session ID: 3t6m67ed6edbv6fuvint8vmuu3   出现Session ID不会改变


额外步骤：
此外也可以建立如下代码来获取session id
[root@localhost ~]# vim /var/www/html/showsession.php
<?php
session_start();
$memcache_obj= new Memcache;
$memcache_obj->connect('192.168.139.132',11211);
$mysess=session_id();
var_dump($memcache_obj->get($mysess));
$memcache_obj->close();
?>
然后在浏览器中输入http://192.10.0.2/showsession.php，出现页面内容，
string(18) "test|i:1507040686;" 





