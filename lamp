centos6 yum安装lamp
（1）php做为httpd的模块
[root@localhost ~]# yum install httpd php php-mysql mysql-server -y
[root@localhost ~]# rpm -ql  php  
/etc/httpd/conf.d/php.conf 已经生成好了php的配置文件
/usr/lib64/httpd/modules/libphp5.so
/var/lib/php/session
/var/www/icons/php.gif 
[root@localhost ~]# httpd -M 必须要出现php5_module (shared)，才说明php已经成为httpd的模块了
[root@localhost ~]# service mysqld start     
mysql> create database chenhao;
mysql> grant all on chenhao.* to 'chenhao'@'192.168.%.%' identified by 'chenhao';
mysql> flush privileges;
     vim /var/www/html/index.php
         <?php
          $conn = mysql_connect('192.168.139.198','chenhao','chenhao');
          if($conn)
            echo 'ok';
            else
            echo 'failed';
        ?>
[root@localhost ~]# service httpd start 
      在浏览器中访问http://192.168.139.198，如果页面出现OK，说明配置成功

说明：
  1）yum 安装httpd和php时，php自动成为httpd的模块。如果是自行编译httpd和php，对应的/etc/httpd/conf.d/php.conf配置文件没有，需要自行创建
  2）如果php要以独立的服务运行，就安装yum install httpd php-fpm php-mysql mysql-server -y




httpd 2.4.9 + mysql-5.5.33 + php-5.4.26编译安装过程：
一、编译安装apache
 (1) 编译安装apr
# tar -jxf apr-1.5.0.tar.bz2
# cd apr-1.5.0
# ./configure --prefix=/usr/local/apr
# make 
# make install

 (2) 编译安装apr-util
# tar -jxf apr-util-1.5.3.tar.bz2
# cd apr-util-1.5.3
# ./configure --prefix=/usr/local/apr-util --with-apr=/usr/local/apr
# make 
# make install

 (3) httpd-2.4.9编译过程也要依赖于pcre-devel软件包
# yum install -y pcre-devel
选择安装mod_ssl
# tar xf httpd-2.4.9.tar.bz2
# cd httpd-2.4.9
# ./configure --prefix=/usr/local/apache --sysconfdir=/etc/httpd   --enable-so --enable-ssl --enable-cgi --enable-rewrite --with-zlib --with-pcre 
   --with-apr=/usr/local/apr --with-apr-util=/usr/local/apr-util   --enable-modules=most --enable-mpms-shared=all --with-mpm=prefork 
# make 
# make install

 (4) vim /etc/httpd/httpd.conf
     PidFile  "/var/run/httpd.pid"
（5）vim /etc/rc.d/init.d/httpd  提供sys服务脚本，脚本stop有点问题
#!/bin/bash
#
# httpd        Startup script for the Apache HTTP Server
#
# chkconfig: - 85 15
# description: Apache is a World Wide Web server.  It is used to 
#              serve HTML files and CGI.
# processname: httpd
# config: /etc/httpd/conf/httpd.conf
# config: /etc/sysconfig/httpd
# pidfile: /var/run/httpd.pid

# Source function library.
. /etc/rc.d/init.d/functions

if [ -f /etc/sysconfig/httpd ]; then
        . /etc/sysconfig/httpd
fi

# Start httpd in the C locale by default.
HTTPD_LANG=${HTTPD_LANG-"C"}

# This will prevent initlog from swallowing up a pass-phrase prompt if
# mod_ssl needs a pass-phrase from the user.
INITLOG_ARGS=""

# Set HTTPD=/usr/sbin/httpd.worker in /etc/sysconfig/httpd to use a server
# with the thread-based "worker" MPM; BE WARNED that some modules may not
# work correctly with a thread-based MPM; notably PHP will refuse to start.

# Path to the apachectl script, server binary, and short-form for messages.
apachectl=/usr/local/apache/bin/apachectl
httpd=${HTTPD-/usr/local/apache/bin/httpd}
prog=httpd
pidfile=${PIDFILE-/var/run/httpd.pid}
lockfile=${LOCKFILE-/var/lock/subsys/httpd}
RETVAL=0  --表示returnvalue

start() {
        echo -n $"Starting $prog: "  -n表示不要换行
        LANG=$HTTPD_LANG   daemon --pidfile=${pidfile} $httpd $OPTIONS  
        RETVAL=$?
        echo
        [ $RETVAL = 0 ] && touch ${lockfile}  
        return $RETVAL
}

stop() {
  echo -n $"Stopping $prog: "
  killproc -p ${pidfile} -d 10 $httpd  
  RETVAL=$? 
  echo
  [ $RETVAL = 0 ] && rm -f ${lockfile} ${pidfile}
}
reload() {
    echo -n $"Reloading $prog: "
    if ! LANG=$HTTPD_LANG $httpd $OPTIONS -t >&/dev/null; then
        RETVAL=$?
        echo $"not reloading due to configuration syntax error"
        failure $"not reloading $httpd due to configuration syntax error"
    else
        killproc -p ${pidfile} $httpd -HUP
        RETVAL=$?
    fi
    echo
}

# See how we were called.
case "$1" in
  start)
  start
  ;;
  stop)
  stop
  ;;
  status)
  status -p ${pidfile} $httpd  
  RETVAL=$?
  ;;
  restart)
  stop
  start
  ;;
  condrestart) 有条件的restart
  if [ -f ${pidfile} ] ; then
    stop
    start
  fi
  ;;
  reload)
    reload
  ;;
  graceful|help|configtest|fullstatus)
  $apachectl $@
  RETVAL=$?
  ;;
  *)
  echo $"Usage: $prog {start|stop|restart|condrestart|reload|status|fullstatus|graceful|help|configtest}"
  exit 1
esac
exit $RETVAL

（6）chmod +x /etc/rc.d/init.d/httpd
（7）chkconfig --add httpd
（8）service httpd start ，测试服务是否正常

新的服务脚本测试正常
#!/bin/bash
			
#
			
# chkconfig: - 85 15
			
# description: test service script
			
#
 			
  prog=httpd			
  lockfile=/var/lock/subsys/$prog

	  
  start() {
				
            if [ -f $lockfile ]; then
					
            echo "$prog is running yet."
				
        else
					
            touch $lockfile

            /usr/local/apache/bin/httpd -k start					
            [ $? -eq 0 ] && echo "start $prog finshed."
				           
            fi
			
  }

			
  stop() {
				
           if [ -f $lockfile ]; then

           /usr/local/apache/bin/httpd -k stop					
           rm -f $lockfile
		   
           [ $? -eq 0 ] && echo "stop $prog finished."
				
        else
					
           echo "$prog is not running."
				
            fi
			
  }
			
  status() {
				
            if [ -f $lockfile ]; then
			   
            echo "$prog is running"
				
         else
					
            echo "$prog is stopped."
				            
            fi
			
  }

			
   usage() {
				
         echo "Usage: $prog {start|stop|restart|status}"
			
   }

			

case $1 in
			
     start)
				
     start 
     ;;
			
      stop)
				
      stop 
     ;;
		   
   restart)
				
      stop
				
      start 
     ;;
			
    status)
				
    status 
     ;;
			
         *)
				
      usage
				
      exit 1 
     ;;
		

esac
			
		


补充说明：
（1）构建MPM为静态模块
     在全部平台中，MPM都可以构建为静态模块。在构建时选择一种MPM，链接到服务器中。如果要改变MPM，必须重新构建。为了使用指定的MPM，请在执行configure脚本 时，
     使用参数 --with-mpm=NAME。NAME是指定的MPM名称。编译完成后，可以使用 ./httpd -l 来确定选择的MPM。 此命令会列出编译到服务器程序中的所有模块，包括 MPM。

（2）构建 MPM 为动态模块
     在Unix或类似平台中，MPM可以构建为动态模块，与其它动态模块一样在运行时加载。 
     构建MPM为动态模块允许通过修改LoadModule指令内容来改变MPM，而不用重新构建服务器程序。在执行configure脚本时，使用--enable-mpms-shared选项即可启用此特性。
     当给出的参数为all时，所有此平台支持的MPM模块都会被安装。还可以在参数中给出模块列表。默认MPM，可以自动选择或者在执行configure脚本时通过--with-mpm选项来指定，
     然后出现在生成的服务器配置文件中。编辑LoadModule指令内容可以选择不同的MPM。


二、安装mysql-5.5.33
1、准备数据存放的文件系统
2、新建用户以安全方式运行进程：
# groupadd -r mysql
# useradd -g mysql -r -s /sbin/nologin -M -d /var/lib/mysql  mysql
# chown -R mysql:mysql /var/lib/mysql 
3、安装并初始化mysql-5.5.33
# tar xf mysql-5.5.33-linux2.6-i686.tar.gz -C /usr/local
# cd /usr/local/
# ln -sv mysql-5.5.33-linux2.6-i686  mysql
# cd mysql 
# chown -R mysql:mysql  mysql
# scripts/mysql_install_db  --user=mysql --datadir=/var/lib/mysql
4、为mysql提供主配置文件：
# cd /usr/local/mysql
# cp support-files/my-large.cnf  /etc/my.cnf
  vim /etc/my.cnf
     thread_concurrency = 2
     datadir = /mydata/data
5、为mysql提供sysv服务脚本：
# cd /usr/local/mysql
# cp support-files/mysql.server  /etc/rc.d/init.d/mysqld
# chmod +x /etc/rc.d/init.d/mysqld
# chkconfig --add mysqld
# chkconfig mysqld on
# service mysqld start 
mysql> create database chenhao;
mysql> grant all on chenhao.* to 'chenhao'@'192.168.%.%' identified by 'chenhao';
mysql> flush privileges;


为了使用mysql的安装符合系统使用规范，并将其开发组件导出给系统使用，这里还需要进行如下步骤：
6、输出mysql的man手册至man命令的查找路径：
[root@localhost ~]#  vim /etc/man.config
MANPATH  /usr/local/mysql/man
7、输出mysql的头文件至系统头文件路径/usr/include,这可以通过简单的创建链接实现：
[root@localhost ~]# ln -sv /usr/local/mysql/include  /usr/include/mysql
8、输出mysql的库文件给系统库查找路径：
[root@localhost ~]# vim /etc/ld.so.conf.d/mysql.conf
/usr/local/mysql/lib 
[root@localhost ~]# ldconfig  让系统重新载入系统库：
9、修改PATH环境变量，让系统可以直接使用mysql的相关命令。具体实现过程这里不再给出。
[root@localhost ~]# vim /etc/profile.d/NAME.sh
    				
export PATH=/PATH/TO/BIN:$PATH

 
[root@localhost ~]# source /etc/profile.d/NAME.sh
  


三、编译安装php-5.4.26

1、解决依赖关系：
# yum -y groupinstall "Desktop Platform Development" 
# yum -y groupinstall "X Software Development" 
# yum -y install bzip2-devel  libxml2-devel
# yum -y install libmcrypt-devel mhash-devel  如果想让编译的php支持mcrypt扩展和mhash扩展，就安装
2、编译安装php-5.4.26
# tar xf php-5.4.26.tar.bz2
# cd php-5.4.26
# ./configure --prefix=/usr/local/php --with-mysql=/usr/local/mysql --with-openssl --with-mysqli=/usr/local/mysql/bin/mysql_config --enable-mbstring 
   --with-freetype-dir --with-jpeg-dir --with-png-dir --with-zlib --with-libxml-dir=/usr --enable-xml  --enable-sockets  --with-mcrypt  --with-config-file-path=/etc  
   --with-config-file-scan-dir=/etc/php.d --with-bz2   --enable-maintainer-zts --with-apxs2=/usr/local/apache/bin/apxs
# make
# make test  这里可能有些错误，不要管，继续往下操作
# make intall

为php提供配置文件：
# cp php.ini-production /etc/php.ini

3、 编辑apache配置文件httpd.conf，以apache支持php
    vim /etc/httpd.conf   注意查看apache编译时的命令
       AddType application/x-httpd-php  .php
       AddType application/x-httpd-php-source  .phps
       DirectoryIndex  index.php  index.html    默认的主页面类型
4、servie httpd restart 
5、vim /usr/local/apache24/htdocs/index.php
    <?php
      $link = mysql_connect('192.168.139.192','chenhao','chenhao');
      if ($link)
        echo "Success";
      else
        echo "Failure";
      mysql_close();
    ?>

补充说明：
1、这里为了支持apache的worker或event这两个MPM，编译时使用了--enable-maintainer-zts选项。
2、如果使用PHP5.3以上版本，为了链接MySQL数据库，可以指定mysqlnd，这样在本机就不需要先安装MySQL或MySQL开发包了。
   mysqlnd从php 5.3开始可用，可以编译时绑定到它（而不用和具体的MySQL客户端库绑定形成依赖），但从PHP 5.4开始它就是默认设置了。
# ./configure --with-mysql=mysqlnd --with-pdo-mysql=mysqlnd --with-mysqli=mysqlnd


四、安装xcache，为php加速：
1、安装
# tar xf xcache-3.0.3.tar.gz
# cd xcache-3.0.3
# /usr/local/php/bin/phpize
# ./configure --enable-xcache --with-php-config=/usr/local/php/bin/php-config
# make && make install
安装结束时，会出现类似如下行：
Installing shared extensions:     /usr/local/php/lib/php/extensions/no-debug-zts-20100525/
2、编辑php.ini，整合php和xcache：
首先将xcache提供的样例配置导入php.ini
# mkdir /etc/php.d
# cp xcache.ini /etc/php.d
说明：xcache.ini文件在xcache的源码目录中。
接下来编辑/etc/php.d/xcache.ini，找到zend_extension开头的行，修改为如下行：
zend_extension = /usr/local/php/lib/php/extensions/no-debug-zts-20100525/xcache.so
注意：如果php.ini文件中有多条zend_extension指令行，要确保此新增的行排在第一位。



第二部分、配置apache-2.4.9以fpm方式的php-5.4.26
一、apache、MySQL的安装与前一部分相同；请根据其进行安装；
二、编译安装php-5.4.26
1、解决依赖关系：
   同上
2、编译安装php-5.4.26
# tar xf php-5.4.26.tar.bz2
# cd php-5.4.26
#./configure --prefix=/usr/local/php5 --with-mysql=/usr/local/mysql --with-openssl --with-mysqli=/usr/local/mysql/bin/mysql_config --enable-mbstring 
  --with-freetype-dir --with-jpeg-dir --with-png-dir  --with-zlib --with-libxml-dir=/usr --enable-xml  --enable-sockets  --with-mcrypt  --with-config-file-path=/etc
  --with-config-file-scan-dir=/etc/php.d --with-bz2    --enable-maintainer-zts  --with-apxs2=/usr/local/apache/bin/apxs  --with-mhash  --enable-fpm  就多最后这一项
# make
# make test
# make intall


为php提供配置文件：
# cp php.ini-production /etc/php.ini
3、配置php-fpm,为php-fpm提供SysV init脚本，并将其添加至服务列表：
# cp sapi/fpm/init.d.php-fpm  /etc/rc.d/init.d/php-fpm
# chmod +x /etc/rc.d/init.d/php-fpm
# chkconfig --add php-fpm
# chkconfig php-fpm on

为php-fpm提供配置文件：
# cp /usr/local/php5/etc/php-fpm.conf.default /usr/local/php5/etc/php-fpm.conf 
# vim /usr/local/php5/etc/php-fpm.conf
pid = /usr/local/php5/var/run/php-fpm.pid  启用pid文件
pm.max_children = 50
pm.start_servers = 5
pm.min_spare_servers = 2
pm.max_spare_servers = 8
listen = 127.0.0.1:9000


# service php-fpm start

使用如下命令来验正（如果此命令输出有中几个php-fpm进程就说明启动成功了）：
# ps aux | grep php-fpm

默认情况下，fpm监听在127.0.0.1的9000端口，也可以使用如下命令验正其是否已经监听在相应的套接字。
# netstat -tnlp | grep php-fpm
tcp        0      0 127.0.0.1:9000              0.0.0.0:*                   LISTEN      689/php-fpm 


三、配置httpd-2.4.9

1、启用httpd的相关模块
vim /etc/httpd.conf
    Include /etc/extra/httpd-vhosts.conf 不同的编译情况，开启的虚拟机位置不一样，但是一定要开启虚拟机，约在484行
    LoadModule proxy_module modules/mod_proxy.so
    LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so
在Apache httpd 2.4以后已经专门有一个模块针对FastCGI的实现，此模块为mod_proxy_fcgi.so，它其实是作为mod_proxy.so模块的扩充，因此，这两个模块都要加载

2、配置虚拟主机支持使用fcgi
vim /etc/extra/httpd-vhosts.conf
<VirtualHost *:80>
    DocumentRoot "/usr/local/apache/htdocs/web/www/"
    ServerName www.chenhao1.com
    ProxyRequests Off
    ProxyPassMatch ^/(.*\.php)$   fcgi://127.0.0.1:9000/web/www/$1   此处的/web/www/是绝对路径
    <Directory "/usr/local/apache/htdocs/web/www/">
        Options none
        AllowOverride none
        Require all granted
    </Directory>
</VirtualHost>


mkdir /web/www/ -pv 
vim /web/www/index.php
<?php
   $conn = mysql_connect('192.168.139.192','chenhao','chenhao');
   if($conn)
     echo "success from /web/www/index.php";
     else
     echo "failure from /web/www/index.php";
     mysql_close();
?>

service httpd start 
/usr/local/apache/bin/httpd -t 
/usr/local/apache/bin/httpd -S 查看虚拟机是否已经存在

实现功能：http:/www.chenhao1.com/index.php----》fcgi://127.0.0.1:9000/www/web/index.php
ProxyRequests Off：关闭正向代理
ProxyPassMatch：把以.php结尾的文件请求发送到php-fpm进程，php-fpm至少需要知道运行的目录和URI，所以这里直接在fcgi://127.0.0.1:9000后指明了这两个参数，
其它的参数的传递已经被mod_proxy_fcgi.so进行了封装，不需要手动指定。

3、编辑apache配置文件httpd.conf，让apache能识别php格式的页面，并支持php格式的主页
vim /etc/httpd/httpd.conf
   AddType application/x-httpd-php  .php
   AddType application/x-httpd-php-source  .phps
   DirectoryIndex  index.php  index.html

补充：Apache httpd 2.4以前的版本中，要么把PHP作为Apache的模块运行，要么添加一个第三方模块支持PHP-FPM实现。
